jobs:
  macos-mssql-migration:
    if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'macos-latest'
      }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v2
    - continue-on-error: true
      uses: potatoqualitee/mssqlsuite@v1.7
      with:
        SA-password: YourStrongPassw0rd
        install: sqlengine, sqlclient, sqlpackage, localdb
        version: 2019
    - continue-on-error: true
      name: Create MS SQL Database
      run: sqlcmd -U SA -P 'YourStrongPassw0rd' -Q 'CREATE DATABASE testdb'
    - continue-on-error: true
      name: Run query
      run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @@VERSION'
    - continue-on-error: true
      name: Execute MSSQL Scripts Mac
      run: 'sqlcmd -U SA -P ''YourStrongPassw0rd'' -Q ''CREATE DATABASE testdb''

        sqlcmd -U SA -P ''YourStrongPassw0rd'' -d testdb -Q ''SELECT @@VERSION''

        sqlcmd -U SA -P ''YourStrongPassw0rd'' -d testdb -i ./.github/migration-tester/utils/db-scripts/IS-5.11/mssql.sql

        sqlcmd -U SA -P ''YourStrongPassw0rd'' -d testdb -i ./.github/migration-tester/utils/db-scripts/IS-5.11/identity/mssql.sql

        sqlcmd -U SA -P ''YourStrongPassw0rd'' -d testdb -i ./.github/migration-tester/utils/db-scripts/IS-5.11/identity/uma/mssql.sql

        sqlcmd -U SA -P ''YourStrongPassw0rd'' -d testdb -i ./.github/migration-tester/utils/db-scripts/IS-5.11/consent/mssql.sql

        sqlcmd -U SA -P ''YourStrongPassw0rd'' -d testdb -i ./.github/migration-tester/utils/db-scripts/IS-5.11/metrics/mssql.sql

        '
    - continue-on-error: true
      name: Verify script execution
      run: sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @@VERSION'
    - continue-on-error: true
      name: Execute Migration Automation Script Mac
      run: "chmod +x ${{ github.workspace }}/.github/migration-tester/migration-automation/mac-os/migration-script-mac.sh\
        \ \nsh ${{ github.workspace }}/.github/migration-tester/migration-automation/mac-os/migration-script-mac.sh\
        \ \"${{ github.event.inputs.urlOld }}\" \"${{ github.event.inputs.urlNew }}\"\
        \ \"${{ github.event.inputs.currentVersion }}\" \"${{ github.event.inputs.migratingVersion\
        \ }}\" \"${{ github.event.inputs.database }}\" \"${{ github.event.inputs.os\
        \ }}\" \"${{ secrets.MIGRATION_EMAIL }}\" \"${{ secrets.MIGRATION_PASSWORD\
        \ }}\" \"${{ secrets.MIGRATION_PAT }}\" \"${{ secrets.GCP_CLIENT_ID }}\" \"\
        ${{ secrets.GCP_CLIENT_SECRET }}\" \"${{ secrets.GCP_REFRESH_TOKEN }}\" |\
        \ tee \"${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt\"\
        \n"
    - continue-on-error: true
      if: ${{ always() }}
      name: Persist Logs
      run: 'mkdir -p ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts

        cp ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt
        ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/

        '
    - continue-on-error: true
      if: always()
      name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
  macos-mysql-migration:
    if: ${{ github.event.inputs.database == 'mysql' && github.event.inputs.os == 'macos-latest'
      }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Execute Migration Automation Script Mac
      run: "chmod +x ${{ github.workspace }}/.github/migration-tester/migration-automation/mac-os/migration-script-mac.sh\
        \ \nsh ${{ github.workspace }}/.github/migration-tester/migration-automation/mac-os/migration-script-mac.sh\
        \ \"${{ github.event.inputs.urlOld }}\" \"${{ github.event.inputs.urlNew }}\"\
        \ \"${{ github.event.inputs.currentVersion }}\" \"${{ github.event.inputs.migratingVersion\
        \ }}\" \"${{ github.event.inputs.database }}\" \"${{ github.event.inputs.os\
        \ }}\" \"${{ secrets.MIGRATION_EMAIL }}\" \"${{ secrets.MIGRATION_PASSWORD\
        \ }}\" \"${{ secrets.MIGRATION_PAT }}\" \"${{ secrets.GCP_CLIENT_ID }}\" \"\
        ${{ secrets.GCP_CLIENT_SECRET }}\" \"${{ secrets.GCP_REFRESH_TOKEN }}\" |\
        \ tee \"${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt\"\
        \n"
    - continue-on-error: true
      if: ${{ always() }}
      name: Persist Logs
      run: 'mkdir -p ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts

        cp ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt
        ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/

        '
    - continue-on-error: true
      if: always()
      name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
  macos-postgres-migration:
    if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os ==
      'macos-latest' }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v2
    - continue-on-error: true
      env:
        PGDATA: /usr/local/var/postgres
        PGDATABASE: testdb
      name: Set up PostgreSQL
      run: 'brew update

        brew install postgresql

        initdb $PGDATA

        pg_ctl -D $PGDATA start

        createuser -s postgres

        createdb $PGDATABASE

        psql -c "GRANT ALL PRIVILEGES ON DATABASE $PGDATABASE TO postgres;"

        '
    - continue-on-error: true
      name: Execute Postgres SQL scripts
      run: 'psql -d testdb -f "./.github/migration-tester/utils/db-scripts/IS-5.11/postgresone.sql"

        psql -d testdb -f "./.github/migration-tester/utils/db-scripts/IS-5.11/consent/postgresfour.sql"

        psql -d testdb -f "./.github/migration-tester/utils/db-scripts/IS-5.11/identity/postgrestwo.sql"

        psql -d testdb -f "./.github/migration-tester/utils/db-scripts/IS-5.11/identity/uma/postgresthree.sql"

        psql -d testdb -f "./.github/migration-tester/utils/db-scripts/IS-5.11/metrics/postgresfive.sql"

        '
    - continue-on-error: true
      name: Verify script execution
      run: psql -d testdb -c 'SHOW server_version'
      shell: bash
    - continue-on-error: true
      name: Execute Migration Automation Script Mac
      run: "chmod +x ${{ github.workspace }}/.github/migration-tester/migration-automation/mac-os/migration-script-mac.sh\
        \ \nsh ${{ github.workspace }}/.github/migration-tester/migration-automation/mac-os/migration-script-mac.sh\
        \ \"${{ github.event.inputs.urlOld }}\" \"${{ github.event.inputs.urlNew }}\"\
        \ \"${{ github.event.inputs.currentVersion }}\" \"${{ github.event.inputs.migratingVersion\
        \ }}\" \"${{ github.event.inputs.database }}\" \"${{ github.event.inputs.os\
        \ }}\" \"${{ secrets.MIGRATION_EMAIL }}\" \"${{ secrets.MIGRATION_PASSWORD\
        \ }}\" \"${{ secrets.MIGRATION_PAT }}\" \"${{ secrets.GCP_CLIENT_ID }}\" \"\
        ${{ secrets.GCP_CLIENT_SECRET }}\" \"${{ secrets.GCP_REFRESH_TOKEN }}\" |\
        \ tee \"${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt\"\
        \n"
    - continue-on-error: true
      if: ${{ always() }}
      name: Persist Logs
      run: 'mkdir -p ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts

        cp ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt
        ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/

        '
    - continue-on-error: true
      if: always()
      name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
  ubuntu-mssql-migration:
    if: ${{ github.event.inputs.database == 'mssql' && github.event.inputs.os == 'ubuntu-latest'
      }}
    runs-on: self-hosted
    services:
      mssql:
        env:
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
          SA_PASSWORD: YourStrongPassw0rd
        image: mcr.microsoft.com/mssql/server:2019-latest
        options: --name=sqlserver-test --health-cmd="/opt/mssql-tools/bin/sqlcmd -S
          localhost -U SA -P 'YourStrongPassw0rd' -Q 'SELECT 1'" --health-interval=10s
          --health-timeout=5s --health-retries=3
        ports:
        - 1433:1433
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Create MS SQL Database
      run: 'sudo apt-get update && sudo apt-get install -y mssql-tools

        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ''YourStrongPassw0rd'' -Q
        ''CREATE DATABASE testdb''

        '
    - continue-on-error: true
      name: Copy SQL files to MSSQL container
      run: 'docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/mssql.sql
        sqlserver-test:/mssql.sql

        docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA
        -P ''YourStrongPassw0rd'' -d testdb -i /mssql.sql

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/identity/mssql.sql
        sqlserver-test:/identity-mssql.sql

        docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA
        -P ''YourStrongPassw0rd'' -d testdb -i /identity-mssql.sql

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/identity/uma/mssql.sql
        sqlserver-test:/identity-uma-mssql.sql

        docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA
        -P ''YourStrongPassw0rd'' -d testdb -i /identity-uma-mssql.sql

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/consent/mssql.sql
        sqlserver-test:/consent-mssql.sql

        docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA
        -P ''YourStrongPassw0rd'' -d testdb -i /consent-mssql.sql

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/metrics/mssql.sql
        sqlserver-test:/metrics-mssql.sql

        docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA
        -P ''YourStrongPassw0rd'' -d testdb -i /metrics-mssql.sql

        echo "Copied mssql scripts to docker container"

        '
    - continue-on-error: true
      name: Execute Migration Automation Script Ubuntu
      run: "chmod +x ${{ github.workspace }}/.github/migration-tester/migration-automation/ubuntu-os/migration-script-ubuntu.sh\
        \ \nsh ${{ github.workspace }}/.github/migration-tester/migration-automation/ubuntu-os/migration-script-ubuntu.sh\
        \ \"${{ github.event.inputs.urlOld }}\" \"${{ github.event.inputs.urlNew }}\"\
        \ \"${{ github.event.inputs.currentVersion }}\" \"${{ github.event.inputs.migratingVersion\
        \ }}\" \"${{ github.event.inputs.database }}\" \"${{ github.event.inputs.os\
        \ }}\" \"${{ secrets.MIGRATION_EMAIL }}\" \"${{ secrets.MIGRATION_PASSWORD\
        \ }}\" \"${{ secrets.MIGRATION_PAT }}\" \"${{ secrets.GCP_CLIENT_ID }}\" \"\
        ${{ secrets.GCP_CLIENT_SECRET }}\" \"${{ secrets.GCP_REFRESH_TOKEN }}\" |\
        \ tee ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt\n"
    - continue-on-error: true
      if: ${{ always() }}
      name: Persist Logs
      run: 'mkdir -p ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts

        cp ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt
        ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/

        '
    - continue-on-error: true
      if: always()
      name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
  ubuntu-mysql-migration:
    if: ${{ github.event.inputs.database == 'mysql' && github.event.inputs.os == 'ubuntu-latest'
      }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Execute Migration Automation Script Ubuntu
      run: "chmod +x ${{ github.workspace }}/.github/migration-tester/migration-automation/ubuntu-os/migration-script-ubuntu.sh\
        \ \nsh ${{ github.workspace }}/.github/migration-tester/migration-automation/ubuntu-os/migration-script-ubuntu.sh\
        \ \"${{ github.event.inputs.urlOld }}\" \"${{ github.event.inputs.urlNew }}\"\
        \ \"${{ github.event.inputs.currentVersion }}\" \"${{ github.event.inputs.migratingVersion\
        \ }}\" \"${{ github.event.inputs.database }}\" \"${{ github.event.inputs.os\
        \ }}\" \"${{ secrets.MIGRATION_EMAIL }}\" \"${{ secrets.MIGRATION_PASSWORD\
        \ }}\" \"${{ secrets.MIGRATION_PAT }}\" \"${{ secrets.GCP_CLIENT_ID }}\" \"\
        ${{ secrets.GCP_CLIENT_SECRET }}\" \"${{ secrets.GCP_REFRESH_TOKEN }}\" |\
        \ tee \"${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt\"\
        \n"
    - continue-on-error: true
      if: ${{ always() }}
      name: Persist Logs
      run: 'mkdir -p ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts

        cp ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt
        ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/logs.txt

        '
    - continue-on-error: true
      if: always()
      name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
  ubuntu-postgres-migration:
    if: ${{ github.event.inputs.database == 'postgres' && github.event.inputs.os ==
      'ubuntu-latest' }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Setup Docker environment
      run: '# Get the ID of the workflow from the GitHub API using curl and jq

        WORKFLOW_ID=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/wso2/product-is/actions/workflows
        | jq -r ''.workflows[] | select(.name == "Migration Tester") | .id'')

        echo "Workflow ID: $WORKFLOW_ID"

        # Update and upgrade packages, and install necessary dependencies

        sudo apt-get update

        sudo apt-get upgrade

        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

        # Add Docker GPG key and add the Docker repository

        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add
        -

        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu
        $(lsb_release -cs) stable"

        # Update the packages again and install Docker CE

        sudo apt-get update

        sudo apt-get install -y docker-ce

        '
    - continue-on-error: true
      name: Run Docker command
      run: "# Create the PostgreSQL container if it doesn't already exist\nif ! docker\
        \ ps -a | grep postgres; then\n  echo \"Creating the PostgreSQL container...\"\
        \n  docker run -d -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=postgres\
        \ postgres\n  sleep 20\n  echo \"PostgreSQL container created successfully.\"\
        \nfi\n# Start the PostgreSQL server if it's not running\nif ! docker ps |\
        \ grep postgres; then\n  echo \"Starting the PostgreSQL server...\"\n  docker\
        \ start postgres\n  sleep 20\n  echo \"PostgreSQL server started successfully.\"\
        \nfi\n# Create a new database 'testdb'\ndocker exec -i postgres psql -U postgres\
        \ -c \"CREATE DATABASE testdb;\"\necho \"Database created successfully!\"\n\
        # Grant all privileges to postgres user\ndocker exec -i postgres psql -U postgres\
        \ -c \"GRANT ALL PRIVILEGES ON DATABASE testdb TO postgres;\"\necho \"Database\
        \ privileges granted successfully!\"\n# Change the password for role postgres\n\
        docker exec -i postgres psql -U postgres -c \"ALTER USER postgres WITH PASSWORD\
        \ 'postgres';\"\necho \"Password for role 'postgres' changed successfully!\"\
        \n"
    - continue-on-error: true
      name: Copy SQL file to PostgreSQL container
      run: 'docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/postgresone.sql
        postgres:/

        docker exec -i postgres sh -c ''exec psql -U postgres -d testdb < /postgresone.sql''

        echo "Postgre database created successfully!"

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/identity/postgrestwo.sql
        postgres:/

        docker exec -i postgres sh -c ''exec psql -U postgres -d testdb < /postgrestwo.sql
        ''

        echo "Script1 executed successfully!"

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/identity/uma/postgresthree.sql
        postgres:/

        docker exec -i postgres sh -c ''exec psql -U postgres -d testdb < /postgresthree.sql''

        echo "Script2 executed successfully!"

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/consent/postgresfour.sql
        postgres:/

        docker exec -i postgres sh -c ''exec psql -U postgres -d testdb < /postgresfour.sql''

        echo "Script3 executed successfully!"

        docker cp ./.github/migration-tester/utils/db-scripts/IS-5.11/metrics/postgresfive.sql
        postgres:/

        docker exec -i postgres sh -c ''exec psql -U postgres -d testdb < /postgresfive.sql''

        echo "All postgre scripts executed successfully!"

        '
    - continue-on-error: true
      name: Execute Migration Automation Script Ubuntu
      run: "chmod +x  ${{ github.workspace }}/.github/migration-tester/migration-automation/ubuntu-os/migration-script-ubuntu.sh\
        \ \nsh ${{ github.workspace }}/.github/migration-tester/migration-automation/ubuntu-os/migration-script-ubuntu.sh\
        \ \"${{ github.event.inputs.urlOld }}\" \"${{ github.event.inputs.urlNew }}\"\
        \ \"${{ github.event.inputs.currentVersion }}\" \"${{ github.event.inputs.migratingVersion\
        \ }}\" \"${{ github.event.inputs.database }}\" \"${{ github.event.inputs.os\
        \ }}\" \"${{ secrets.MIGRATION_EMAIL }}\" \"${{ secrets.MIGRATION_PASSWORD\
        \ }}\" \"${{ secrets.MIGRATION_PAT }}\" \"${{ secrets.GCP_CLIENT_ID }}\" \"\
        ${{ secrets.GCP_CLIENT_SECRET }}\" \"${{ secrets.GCP_REFRESH_TOKEN }}\" |\
        \ tee \"${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt\"\
        \n"
    - continue-on-error: true
      if: ${{ always() }}
      name: Persist Logs
      run: 'mkdir -p ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts

        cp ${{ github.workspace }}/.github/migration-tester/migration-automation/logs.txt
        ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/

        '
    - continue-on-error: true
      if: always()
      name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
  validate-migration:
    if: always()
    needs:
    - ubuntu-postgres-migration
    - ubuntu-mssql-migration
    - macos-mssql-migration
    - macos-postgres-migration
    - ubuntu-mysql-migration
    - macos-mysql-migration
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v2
    - continue-on-error: true
      if: always()
      name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: logs-${{ github.event.inputs.currentVersion }}-${{ github.event.inputs.migratingVersion
          }}-${{ github.event.inputs.database }}-${{ github.event.inputs.os }}
        path: ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts
        retention-days: 7
    - continue-on-error: true
      name: Post Migration Testing
      run: "# Access logs from the downloaded artifacts folder\nwhile IFS= read -r\
        \ line; do\n  if echo \"$line\" | grep -i -q \"ERROR\\|error\\|Error\"; then\n\
        \    echo -e \"\\e[91m$line\\e[0m\"\n  else\n    echo \"$line\"\n  fi\ndone\
        \ < ${{ github.workspace }}/.github/migration-tester/migration-automation/artifacts/logs.txt\n"
name: Migration Tester
on:
  repository_dispatch:
    types: trigger-ga___migration-automation.yml
